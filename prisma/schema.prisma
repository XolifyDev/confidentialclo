// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Session {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  firstName     String?
  lastName      String?
  name          String?
  isAdmin       Boolean? @default(false)
  emailVerified Boolean?

  email            String?  @unique
  image            String?
  phone_number     String?
  email_subscribed Boolean  @default(true)
  hashedPassword   String?
  banned           Boolean?

  accounts Account[]
  sessions Session[]
  orders   Orders[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Products {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  sizes       String[]
  gallery     String[]
  mainImage   String
  price       String
  url         String
  categories  String[]

  orderProducts OrderProducts[]
}

model OrderProducts {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String   @db.ObjectId
  productId String   @db.ObjectId
  size      String
  product   Products @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Orders {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  inserted_at DateTime @default(now())
  updated_at  DateTime @updatedAt
  userId      String   @db.ObjectId
  sessionId   String
  status      String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SiteSettings {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  totalRevenue   String @default("0")
  totalOrders    String @default("0")
  middleImage    String
  mainHomeImage  String
  storeHomeImage String
  mainDropLink   String
}

model Revenue {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  date   String
  amount String
}

model Categories {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  url  String
}

model CheckoutSession {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  sessionId String
  userId    String
  items     Json
  completed String

  // @@index([sessionId, id])
}
